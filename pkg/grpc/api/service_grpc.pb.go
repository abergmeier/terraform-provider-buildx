// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DriversClient is the client API for Drivers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DriversClient interface {
	InstanceOrDefaultByName(ctx context.Context, in *InstanceByNameRequest, opts ...grpc.CallOption) (*InstanceByNameResponse, error)
}

type driversClient struct {
	cc grpc.ClientConnInterface
}

func NewDriversClient(cc grpc.ClientConnInterface) DriversClient {
	return &driversClient{cc}
}

func (c *driversClient) InstanceOrDefaultByName(ctx context.Context, in *InstanceByNameRequest, opts ...grpc.CallOption) (*InstanceByNameResponse, error) {
	out := new(InstanceByNameResponse)
	err := c.cc.Invoke(ctx, "/Drivers/InstanceOrDefaultByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriversServer is the server API for Drivers service.
// All implementations must embed UnimplementedDriversServer
// for forward compatibility
type DriversServer interface {
	InstanceOrDefaultByName(context.Context, *InstanceByNameRequest) (*InstanceByNameResponse, error)
	mustEmbedUnimplementedDriversServer()
}

// UnimplementedDriversServer must be embedded to have forward compatible implementations.
type UnimplementedDriversServer struct {
}

func (UnimplementedDriversServer) InstanceOrDefaultByName(context.Context, *InstanceByNameRequest) (*InstanceByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstanceOrDefaultByName not implemented")
}
func (UnimplementedDriversServer) mustEmbedUnimplementedDriversServer() {}

// UnsafeDriversServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DriversServer will
// result in compilation errors.
type UnsafeDriversServer interface {
	mustEmbedUnimplementedDriversServer()
}

func RegisterDriversServer(s grpc.ServiceRegistrar, srv DriversServer) {
	s.RegisterService(&Drivers_ServiceDesc, srv)
}

func _Drivers_InstanceOrDefaultByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriversServer).InstanceOrDefaultByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Drivers/InstanceOrDefaultByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriversServer).InstanceOrDefaultByName(ctx, req.(*InstanceByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Drivers_ServiceDesc is the grpc.ServiceDesc for Drivers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Drivers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Drivers",
	HandlerType: (*DriversServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InstanceOrDefaultByName",
			Handler:    _Drivers_InstanceOrDefaultByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/service.proto",
}

// BuildxClient is the client API for Buildx service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuildxClient interface {
	BootByInstanceName(ctx context.Context, in *InstanceByNameRequest, opts ...grpc.CallOption) (*BootByInstanceNameResponse, error)
}

type buildxClient struct {
	cc grpc.ClientConnInterface
}

func NewBuildxClient(cc grpc.ClientConnInterface) BuildxClient {
	return &buildxClient{cc}
}

func (c *buildxClient) BootByInstanceName(ctx context.Context, in *InstanceByNameRequest, opts ...grpc.CallOption) (*BootByInstanceNameResponse, error) {
	out := new(BootByInstanceNameResponse)
	err := c.cc.Invoke(ctx, "/Buildx/BootByInstanceName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuildxServer is the server API for Buildx service.
// All implementations must embed UnimplementedBuildxServer
// for forward compatibility
type BuildxServer interface {
	BootByInstanceName(context.Context, *InstanceByNameRequest) (*BootByInstanceNameResponse, error)
	mustEmbedUnimplementedBuildxServer()
}

// UnimplementedBuildxServer must be embedded to have forward compatible implementations.
type UnimplementedBuildxServer struct {
}

func (UnimplementedBuildxServer) BootByInstanceName(context.Context, *InstanceByNameRequest) (*BootByInstanceNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BootByInstanceName not implemented")
}
func (UnimplementedBuildxServer) mustEmbedUnimplementedBuildxServer() {}

// UnsafeBuildxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuildxServer will
// result in compilation errors.
type UnsafeBuildxServer interface {
	mustEmbedUnimplementedBuildxServer()
}

func RegisterBuildxServer(s grpc.ServiceRegistrar, srv BuildxServer) {
	s.RegisterService(&Buildx_ServiceDesc, srv)
}

func _Buildx_BootByInstanceName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildxServer).BootByInstanceName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Buildx/BootByInstanceName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildxServer).BootByInstanceName(ctx, req.(*InstanceByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Buildx_ServiceDesc is the grpc.ServiceDesc for Buildx service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Buildx_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Buildx",
	HandlerType: (*BuildxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BootByInstanceName",
			Handler:    _Buildx_BootByInstanceName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/service.proto",
}
